
# Data Backends
option(BACKEND_POSIX "Compile backend for POSIX support?" ON)
if(BACKEND_POSIX)
	message(STATUS "WITH_BACKEND_POSIX")
	add_definitions(-DESDM_HAS_POSIX=1)
	SUBDIRS(posix)
	endif()

option(BACKEND_LUSTRE "Compile backend for Lustre support?" OFF)
if(BACKEND_LUSTRE)
	message(STATUS "WITH_BACKEND_LUSTRE")
	add_definitions(-DESDM_HAS_LUSTRE=1)
	SUBDIRS(lustre)
endif()

option(BACKEND_CLOVIS "Compile backend for Clovis support?" OFF)
if(BACKEND_CLOVIS)
	message(STATUS "WITH_BACKEND_CLOVIS")
	add_definitions(-DESDM_HAS_CLOVIS=1)
	SUBDIRS(Clovis)
endif()

option(BACKEND_WOS "Compile backend for WOS support?" OFF)
if(BACKEND_WOS)
	message(STATUS "WITH_BACKEND_WOS")
	add_definitions(-DESDM_HAS_WOS=1)
	SUBDIRS(WOS)
endif()

option(BACKEND_KDSA "Compile backend for Kove XPD / KDSA API" OFF)
option(BACKEND_KDSA_DUMMY "Compile dummy file backend for Kove XPD / KDSA API" OFF)

message(STATUS "Searching for KDSA libraries")
find_path(KDSA_INCLUDE_DIR kdsa.h HINTS ${KDSA_INCLUDE_DIR})
find_library(KDSA_LIBRARY NAMES kdsa HINTS ${KDSA_LIB_DIR})
string(COMPARE EQUAL "${KDSA_LIBRARY}" KDSA_LIBRARY-NOTFOUND _cmp)
if(_cmp)
  message("not found")
else()
  message(STATUS "found in ${KDSA_LIBRARY} and ${KDSA_INCLUDE_DIR}")
  set(BACKEND_KDSA ON)
endif()
if(BACKEND_KDSA OR BACKEND_KDSA_DUMMY)
	message(STATUS "WITH_BACKEND_KDSA")
	add_definitions(-DESDM_HAS_KDSA=1)
	SUBDIRS(kdsa)
endif()
